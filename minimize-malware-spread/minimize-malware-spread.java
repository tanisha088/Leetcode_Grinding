class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
     
        int[] visited=new int[graph.length];
        for(int i=0;i<visited.length;i++)
            visited[i]=-1;
        int n=graph.length;
        int m = graph[0].length;
        int col=0;
    
        int[] color_count = new int[n];
       
        for(int i=0;i<n;i++)
        {
            if(visited[i]==-1)
            {
          int count= dfs(graph,visited,i,n,col);
                color_count[col]=count;
                col++;
            }
        }
        
       // for(int i=0;i<color_count.length;i++)
        //    System.out.print(visited[i]+"   ");
       // System.out.println();
        
        int[] visi = new int[col];
        for(int i=0;i<col;i++)
            visi[i]=-1;
        
        for(int i=0;i<initial.length;i++)
        {
            int colour = visited[initial[i]];
            visi[colour] = (visi[colour]==-1)?1:visi[colour]+1;
        }
        
        int res=-1;
        for(int i=0;i<visi.length;i++)
        {
           // System.out.println()
            if(visi[i]==1)
                res=Math.max(res,color_count[i]);
        }
        if(res==-1)
        {
            Arrays.sort(initial);
            return initial[0];
        }
        int mk= n+1;
        for(int i=0;i<initial.length;i++)
        {
            int val = visited[initial[i]];
            
         //   System.out.println(visi[val]+" "+color_count[val]+" "+mk+" "+res);
            if(visi[val]==1 && color_count[val]==res)
            {
                mk=Math.min(mk,initial[i]);
            }
        }
       return mk;
    }
    
    public int dfs(int[][] graph,int[] visited,int i,int n,int col)
    {
        int count=1;
        visited[i]=col;

        for(int j=0;j<n;j++)
            if(visited[j]==-1 && graph[i][j]==1)
                count+=dfs(graph,visited,j,n,col);
        
        return count;
    }
}